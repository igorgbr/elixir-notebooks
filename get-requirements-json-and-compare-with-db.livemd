<!-- vim: syntax=markdown -->

<!-- livebook:{"persist_outputs":true} -->

[![Run in Livebook](https://livebook.dev/badge/v1/black.svg)](https://livebook.dev/run?url=https%3A%2F%2Fgithub.com%2Figorgbr%2Felixir-notebooks%2Fblob%2Fmain%2Fget-requirements-json-and-compare-with-db.livemd)

# Salva o conteudo do arquivo requirements.json

## Instala e configura lib's

### Insira aqui o nome do projeto:

```elixir
nome_projeto = "sd-0x-project-talker-manager"
```

```elixir
Mix.install([
  {:tentacat, "~> 2.2"},
  {:ecto_sql, "~> 3.7"},
  {:postgrex, "~> 0.16.1"},
  {:poison, "~> 5.0"}
])
```

Iniciamos aqui o banco de dados.

```elixir
defmodule Repo do
  use Ecto.Repo, adapter: Ecto.Adapters.Postgres, otp_app: :my_app
end

Application.put_env(:my_app, Repo,
  username: "Postgres",
  password: "Postgres",
  database: "Postgres",
  hostname: "Postgres",
  port: 5432,
  pool_size: 5
)

Application.ensure_all_started(:ecto_sql)
Application.ensure_all_started(:postgrex)
Repo.__adapter__().storage_down(Repo.config())
Repo.__adapter__().storage_up(Repo.config())
Repo.start_link()

import Ecto.Query
```

```elixir
Ecto.Query
```

Aqui iniciamos o client para acessar o repositorio.

```elixir
access_token = "<meu_token>"
client = Tentacat.Client.new(%{access_token: access_token})
```

---

## Inicio

```elixir
defmodule Requirements do
  def getFileFromRepository(client, nome_projeto) do
    getFile(client, nome_projeto)
    |> createMap()
    |> createList()
  end

  def getDataFromBd(nome_projeto) do
    [result | _] =
      from("project_templates", where: [name: ^nome_projeto], select: [:id])
      |> Repo.all()

    from("project_template_requirements",
      where: [project_template_id: ^result.id],
      select: [:description]
    )
    |> Repo.all()
    |> Enum.map(fn map -> map.description end)
  end

  defp getFile(client, nome_projeto) do
    {200, %{"content" => content, "sha" => _sha}, _} =
      Tentacat.Contents.find(client, "betrybe", nome_projeto, ".trybe/requirements.json")

    content
  end

  defp createMap(content) do
    content
    |> String.split("\n")
    |> Stream.map(fn line ->
      {:ok, decoded} = Base.decode64(line)
      decoded
    end)
    |> Enum.join()
    |> Poison.Parser.parse!()
  end

  defp createList(result) do
    Enum.map(result["requirements"], fn map -> map["description"] end)
  end
end
```

---

<!-- livebook:{"break_markdown":true} -->

Aqui guardamos os requisitos de requirements.json em uma lista

```elixir
reqFile = Requirements.getFileFromRepository(client, nome_projeto)
```

Aqui guardamos os requisitos da tabela project_template_requirements em uma lista

```elixir
reqBD = Requirements.getDataFromBd(nome_projeto)
```

Aqui comparamos se os dados s√£o iguais

```elixir
reqFile === reqBD
```
