# Consumir GraphQl no Elixir

## Install Deps

```elixir
Mix.install([
  {:httpoison, "~> 1.8"},
  {:jason, "~> 1.3"}
])
```

```elixir
defmodule Github.GraphQL do
  @moduledoc """
  Módulo responsável por se comunicar com o endpoint GraphQL do Github.
  """

  @endpoint ~s(https://api.github.com/graphql)
  @token ~s(github_token)

  @doc """
  Busca informações básicas de um determinado repositório.

  ## Exemplos

      iex> repo_info("elixir-lang", "elixir")
      %{
        "data" => %{
          "repository" => %{
            "createdAt" => "2011-01-09T08:43:57Z",
            "defaultBranchRef" => %{"name" => "main"},
            "latestRelease" => %{"id" => "RE_kwDOABLXGs4DzeaA"},
            "name" => "elixir",
            "owner" => %{"login" => "elixir-lang"},
            "pushedAt" => "2022-06-01T15:57:31Z"
          }
        }
      }
  """
  @spec repo_info(String.t(), String.t()) :: map()
  def repo_info(owner, repo) do
    payload =
      %{
        variables: %{owner: owner, name: repo},
        query: ~S"""
        query GetRepoInfo($owner: String!, $name: String!) {
          repository(owner: $owner, name: $name){
            name,
            pushedAt,
            createdAt,
            owner {
              login
            },
            latestRelease {
              id
            },
            defaultBranchRef {
              name
            }
          }
        }
        """
      }
      |> Jason.encode!()

    with {:ok, %HTTPoison.Response{body: body, status_code: 200}} <-
           HTTPoison.post(@endpoint, payload, headers()) do
      Jason.decode!(body)
    end
  end

  defp headers do
    [
      {"Authorization", "Bearer #{@token}"},
      {"Content-Type", "application/json"}
    ]
  end
end
```

```elixir
Github.GraphQL.repo_info("elixir-lang", "elixir")
```
